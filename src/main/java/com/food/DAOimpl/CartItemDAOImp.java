package com.food.DAOimpl;

import java.sql.*;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
//import java.util.Date;

import javax.sql.rowset.serial.SerialBlob;

import com.food.model.CartItem;


public class CartItemDAOImp  {
    String url = "jdbc:mysql://localhost:3306/online_food_delivery";
    String username = "root";
    String password = "mahi";

    String insert = "INSERT INTO `cart_item`(`user_id`,`item_Id`, `restaurant_Id`, `name`, `quantity`, `price`, `image_Path`,`order_Id`) VALUES ( ?,?, ?, ?, ?, ?, ?,?)";
    String select = "SELECT * FROM `cart_item` WHERE `item_Id`=?";
    String update = "UPDATE `cart_item` SET `quantity`=?, `price`=? WHERE `item_Id`=?";
    String delete = "DELETE FROM `cart_item` WHERE `item_Id`=?";
    String selectAll = "SELECT * FROM `cart_item`";
    String selectByOrderId = "SELECT * FROM `cart_item` WHERE `order_Id`=?";
    String updateOrderIdQuery = "UPDATE `cart_item` SET `order_Id`=? WHERE `cart_id`=?";

    Connection connection = null;
    PreparedStatement statement = null;
    ResultSet res = null;

    public CartItemDAOImp() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(url, username, password);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

//    @Override
    public int addCartItem(CartItem cartItem) {
//        String insert = "INSERT INTO Cart_Item (user_id, item_id, restaurant_id, name, quantity, price, image_path) "
//                + "VALUES (?, ?, ?, ?, ?, ?, ?)";

        try {
            // Create the PreparedStatement with RETURN_GENERATED_KEYS to get the auto-generated key
            statement = connection.prepareStatement(insert, Statement.RETURN_GENERATED_KEYS);

            // Set the values for the prepared statement
            statement.setInt(1, cartItem.getUser_id());
            statement.setInt(2, cartItem.getItemId());
            statement.setInt(3, cartItem.getResturantId());
            statement.setString(4, cartItem.getName());
            statement.setInt(5, cartItem.getQuantity());
            statement.setDouble(6, cartItem.getPrice());
            
//            FileInputStream fis=new FileInputStream((cartItem.getImagePath()))

            // Handling the image (Base64 decoding to Blob)
            String[] parts = (cartItem.getImagePath()).split(",");
            String imageString = parts.length > 1 ? parts[1] : parts[0];

            // Decode the Base64 string to get the byte array
            byte[] imageBytes = Base64.getDecoder().decode(imageString);

            // Create a Blob from the byte array
            Blob imageBlob = new SerialBlob(imageBytes);
            statement.setBlob(7, imageBlob);
            statement.setInt(8, cartItem.getOrder_id());

            // Convert the order date (java.util.Date) to java.sql.Timestamp
//            statement.setTimestamp(8, new Timestamp(cartItem.getOrder_date().getTime()));

            // Execute the update and get the number of affected rows
            int n = statement.executeUpdate();

            // Retrieve the generated keys (the autogenerated cartItemId)
            ResultSet rs = statement.getGeneratedKeys();
            if (rs.next()) {
                int generatedId = rs.getInt(1); // The first column in the ResultSet
                return generatedId; // Return the generated cartItemId
            }
            System.out.println("Inserted rows: " + n);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close resources like PreparedStatement and ResultSet here (not shown for brevity)
        }
        return 0;
    } 

//    @Override
    public CartItem getCartItem(int itemId) {
        CartItem cartItem = null;
        try {
            statement = connection.prepareStatement(select);
            statement.setInt(1, itemId);
            res = statement.executeQuery();

            if (res.next()) {
                cartItem = extractCartItemFromResultSet(res);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cartItem;
    }

//    @Override
    public void updateCartItem(CartItem cartItem) {
        try {
            statement = connection.prepareStatement(update);
            statement.setInt(1, cartItem.getQuantity());
            statement.setDouble(2, cartItem.getPrice());
            statement.setInt(3, cartItem.getItemId());

            statement.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

//    @Override
    public void deleteCartItem(int itemId) {
        try {
            statement = connection.prepareStatement(delete);
            statement.setInt(1, itemId);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void deleteCartItemById(int itemId) {
    	String deleteCart = "DELETE FROM `cart_item` WHERE `cart_Id`=?";
        try {
            statement = connection.prepareStatement(deleteCart);
            statement.setInt(1, itemId);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
//    @Override
    public List<CartItem> getAllCartItems() {
        List<CartItem> cartItems = new ArrayList<>();
        try {
            statement = connection.prepareStatement(selectAll);
            res = statement.executeQuery();

            while (res.next()) {
                CartItem cartItem = extractCartItemFromResultSet(res);
                cartItems.add(cartItem);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return cartItems;
    }

//    @Override
    public List<CartItem> getCartItemsByOrderId(int orderId) {
        List<CartItem> cartItems = new ArrayList<>();
        try {
            statement = connection.prepareStatement(selectByOrderId);
            statement.setInt(1, orderId);
            res = statement.executeQuery();

            while (res.next()) {
                CartItem cartItem = extractCartItemFromResultSet(res);
                cartItems.add(cartItem);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return cartItems;
    }

    private CartItem extractCartItemFromResultSet(ResultSet res) throws SQLException {
    	CartItem cartItem=new CartItem();
    	int user_id=res.getInt("user_id");
        int itemId = res.getInt("item_Id");
        int orderId = res.getInt("order_Id");
        int restaurantId = res.getInt("restaurant_Id");
        String name = res.getString("name");
        int quantity = res.getInt("quantity");
        double price = res.getDouble("price");
        Blob imageBlob = res.getBlob("image_path");
//        Blob imagePath = res.getBlob("image_Path");
	      byte[] imageBytes = imageBlob.getBytes(1, (int) imageBlob.length());
	//
//	      // Encode the image bytes to Base64
	      String base64Image = Base64.getEncoder().encodeToString(imageBytes);
	      String imagePath = "data:image/jpeg;base64," + base64Image; // Change the MIME type if needed
//	      menu.setImagePath(imageUrl);
        
//        CartItem cartItem=
        return new CartItem(user_id,itemId, restaurantId, name, quantity, price, imagePath);
    }
    public void updateOrderId(int orderId, int cartId) {
        

        try (PreparedStatement statement = connection.prepareStatement(updateOrderIdQuery)) {
            // Set the order ID
            statement.setInt(1, orderId);
            
            // Format the date to match the database format (assuming it's a TIMESTAMP)
//            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//            String formattedDate = dateFormat.format(createdAt);

            // Set the created_at date
            statement.setInt(2, cartId);
            // Execute the update
            int rowsUpdated = statement.executeUpdate();

            // Return true if at least one row was updated
            System.out.println(rowsUpdated+" updated ");
        } catch (Exception e) {
        	System.out.println("0");
        }
    }
}
