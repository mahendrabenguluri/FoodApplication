package com.food.DAOimpl;

import java.sql.Connection;
import java.sql.Date;
//import java.util.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;

import com.food.DAO.OrderDAO;
import com.food.model.Order;
import com.food.model.Restaurant;


public class OrderDAoImp implements OrderDAO{
	
	
	String url="jdbc:mysql://localhost:3306/online_food_delivery";
	String username="root";
	String password="mahi";
	
	String insert="INSERT INTO orders(`user_id`,`total_amount`,`status`,`payment_method`,`address`) VALUES(?,?,?,?,?)";
	String select="SELECT * FROM `orders` WHERE `order_id`=?";
	String update="UPDATE `orders` SET `total_amount`=?,`status`=?,`payment_method`=? `address`=? WHERE `order_id`=?";
	String selectAll="SELECT * FROM `orders`";
	String delete="DELETE FROM `orders` WHERE `order_id`=?";
//	String orderid="select* from order1 where order_date=?";
//	String orderid = "SELECT `order_id` FROM `orders` WHERE `order_date` =?";
//	String updateAddressPayment="UPDATE `orders` SET `payment_method`=?,`address`=?  WHERE `order_id`=?";

	Connection connection=null;
	PreparedStatement statement=null;
	ResultSet res=null;
	Order order=null;
	
	public OrderDAoImp() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			connection=DriverManager.getConnection(url,username,password);
			
		}
		catch (Exception e) 
		{
			
			e.printStackTrace();
		}
	}
	

	@Override
	public int addOrder(Order Order) {
		PreparedStatement statement=null;
		try {
			
			statement=connection.prepareStatement(insert,Statement.RETURN_GENERATED_KEYS);
			statement.setInt(1, Order.getUser_id());
//			statement.setDouble(2, Order.getRestaurant_id());
			statement.setDouble(2,  Order.getTotal_amount());
			statement.setString(3, Order.getStatus());
			statement.setString(4, Order.getPayment_method());
			statement.setString(5, Order.getAddress());
//			statement.setDate(6, new Date(Order.getOrder_date().getTime()));
			//statement.setTimestamp(6, Order.getOrder_date());
			
			System.out.println(statement.executeUpdate());
			ResultSet rs = statement.getGeneratedKeys();
            if (rs.next()) {
                return rs.getInt(1); // The autogenerated cartItemId
            }
		} 
		catch (Exception e) 
		{
			
			e.printStackTrace();
		}
		return 0;
		
	} 

	@Override
	public Order getOrder(int Order_id) {
		
		try {
			statement=connection.prepareStatement(select);
			statement.setInt(1, Order_id);
			 res=statement.executeQuery();
			
			  if(res.next()) {
				  order= extractUserFromResultSet(res);
			}
		}
		
			catch (Exception ex) 
			{
				
				ex.printStackTrace();
			}
			return order;
	}
	private Order extractUserFromResultSet(ResultSet res) throws SQLException{
		
		Order order=new Order();
		order.setOrder_id(res.getInt("order_id"));
		order.setUser_id(res.getInt("user_id"));
//		order.setRestaurant_id(res.getInt("Restaurant_id"));
		order.setOrder_date(res.getTimestamp("order_date"));
		order.setTotal_amount(res.getInt("total_amount"));
		order.setStatus(res.getString("status"));
		order.setPayment_method(res.getString("payment_method"));
		order.setAddress(res.getString("address"));
	
		return order;
	
		
	}

	@Override
	public void updateOrder(Order Order) {

		try {
					
				    statement = connection.prepareStatement(update);
					
//					statement.setDate(1, new Date(Order.getOrder_date().getTime()));
					statement.setDouble(1,  Order.getTotal_amount());
					statement.setString(2, Order.getStatus());
					statement.setString(3, Order.getPayment_method());
					statement.setString(4, Order.getAddress());
					statement.setInt(5, Order.getOrder_id());
					
					System.out.println(statement.executeUpdate());
					statement.executeUpdate();

				} 
				catch (Exception e) 
				{
					
					e.printStackTrace();
				}
		
	}

	@Override
	public void deleteOrder(int Order) {
		try {
			statement = connection.prepareStatement(delete);
			statement.setInt(1,Order);
			System.out.println("row affected: " + statement.executeUpdate());
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public List<Order> getAllOrder() {
		List<Order> al = new ArrayList<Order>();
		
		 try {
			Statement statement = connection.createStatement();
			ResultSet res = statement.executeQuery(selectAll);
				
			while(res.next()) {
					
				Order order=extractUserFromResultSet(res);				
				al.add(order);			 
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return al;
	}
	

}













//public void updateAddressPaymentMethod(int orderId, String address,String paymentMethod)  {
//	try {
//		statement = connection.prepareStatement(updateAddressPayment);
//		statement.setString(2, address);
//		statement.setString(1, paymentMethod);
//		statement.setInt(3, orderId);
//		statement.executeUpdate();
//	} catch (SQLException e) {
//		// TODO Auto-generated catch block
//		System.out.println("error occurs");
//		e.printStackTrace();
//	}
//}


//@Override
//public int getOrderId(java.util.Date date) {
//try {
//    // Format the date to match the format in the database
//    SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//    String formattedDate = outputFormat.format(date);
//
//    // Prepare the SQL statement to find the Order ID based on the date
//    String orderidQuery = "SELECT Order_ID FROM Order1 WHERE Order_Date = ?";
////    System.out.println(formattedDate+" foramted date");
//    statement = connection.prepareStatement(orderidQuery);
//    statement.setString(1, formattedDate);
//
//    ResultSet res = statement.executeQuery();
//
//    // Check if a result was found
//    if (res.next()) {
//        return res.getInt("Order_ID");
//    } else {
//        System.out.println("Order ID not found for the given date.");
//        return -1;
//    }
//} catch (Exception e) {
//    e.printStackTrace();
//    System.out.println("Error retrieving order ID.");
//    return -1;
//}
//}
